import asyncio

import telebot
from telebot import types
from telebot.async_telebot import AsyncTeleBot

import database
import photo_service


TOKEN = "7029765070:AAHEAbjrQ6n_3daTGs4AIykv7TFS5dPZCjQ"

bot = AsyncTeleBot(token=TOKEN)
db = database.Database()


def validate(message: telebot.types.Message, expected):
    """
    Checks if the message is valid.
    :param message: message to be checked
    :param expected: "text", "photo", "document" or "callback"
    :return: bool, True if the message is valid, otherwise False
    """
    if type(message) is telebot.types.CallbackQuery:
        return expected == "callback"
    return expected == message.content_type


async def step1(message):
    if not validate(message, "text"):
        await bot.send_message(message.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return step1.__name__
    validate(message, "text")
    markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ üêÖ", callback_data="step_1"))
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –¢–∏–≥—Ä–æ–ë–æ—Ç! üêØ –Ø —É–º–Ω—ã–π —Ç–∏–≥—Ä –∏ —è –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞ –∫–æ–≥–æ –∏–∑ –º–æ–∏—Ö —Å–æ—Ä–æ–¥–∏—á–µ–π —Ç—ã –ø–æ—Ö–æ–∂. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ!", reply_markup=markup)
    return step2.__name__


async def step2(callback):
    if not validate(callback, "callback"):
        await bot.send_message(callback.message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É")
        return step2.__name__
    await bot.send_message(callback.message.chat.id, "–ñ–¥—É —Ç–≤–æ–µ —Ñ–æ—Ç–æ!")
    return step3.__name__


async def step3(message):
    if not validate(message, "photo"):
        try:
            await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ")
            return step3.__name__
        except Exception as e:
            await bot.send_message(message.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ")
            return step3.__name__
    photo = message.photo
    await bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —è –∑–Ω–∞—é, –∫—Ç–æ —Ç—ã üòè")

    file_id = photo[-1].file_id
    file_info = await bot.get_file(file_id)
    photo = await bot.download_file(file_info.file_path)

    with open(f"photos/{file_id}.png", "wb") as f:
        f.write(photo)

        db.add_photo(message.chat.id, f"photos/{file_id}.png")

    tiger_photo = photo_service.get_photo(photo)

    await bot.send_photo(message.chat.id, tiger_photo, caption="<description>")

    buttons = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–î–∞", callback_data="yes"))
    buttons.add(types.InlineKeyboardButton("–ê —á—Ç–æ —ç—Ç–æ?", callback_data="question"))
    buttons.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no"))
    await bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –º–∏–∫—Å —Å –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–º? üßëüèª‚Äç ü™Ñ üêØ", reply_markup=buttons)

    return step4.__name__


async def end(callback):
    if not validate(callback, "callback"):
        return end.__name__
    return await step8(callback.message)


async def step6(message):
    button = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ê —á—Ç–æ —Ç—ã –µ—â–µ —É–º–µ–µ—à—å?", callback_data="step8"))
    await bot.send_message(message.chat.id, "–ú–æ–∏ –º–∞–ª—ã—à–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ —Ç–∏–≥—Ä—è—Ç–∞ —É–¥–∏–≤–ª–µ–Ω—ã! üêØüòÆ –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ —Å –Ω–∞–º–∏! üêæüé®", reply_markup=button)
    return end.__name__


async def step7(message, photo):
    with open(photo, "rb") as f:
        photo = f.read()
    """ –î–µ–ª–∞–µ–º –º–∏–∫—Å """
    button = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ê —á—Ç–æ —Ç—ã –µ—â–µ —É–º–µ–µ—à—å?", callback_data="step8"))
    await bot.send_photo(message.chat.id, photo, caption="–í–æ—Ç, —á—Ç–æ —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å‚ú®üò±", reply_markup=button)
    return end.__name__


async def step5(callback):
    if not validate(callback, "callback"):
        await bot.send_message(callback.chat.id, "–í–µ—Ä–Ω–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É!")
        return step5.__name__
    answer = callback.data
    if answer == "mix":
        photo = db.get_photo(callback.from_user.id)
        step = await step7(callback.message, photo)
        return step
    if answer == "not_mix":
        step = await step6(callback.message)
        return step
    await bot.send_message(callback.message.chat.id, "–û–π! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∞–∂–∞–ª –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É. –í–µ—Ä–Ω–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
    return step5.__name__


async def step4(callback):
    if not validate(callback, "callback"):
        await bot.send_message(callback.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–≤–æ–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞")
        return step4.__name__
    answer = callback.data
    match answer:
        case "yes":
            photo = db.get_photo(callback.from_user.id)
            ''' –º–∏–∫—Å —Ñ–æ—Ç–∫–∏ '''
            step = await step7(callback.message, photo)
            return step
        case "question":
            buttons = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–î–∞–≤–∞–π! üí™üé®", callback_data="mix"))
            buttons.add(types.InlineKeyboardButton("–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="not_mix"))
            await bot.send_message(callback.message.chat.id, "–ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π - —ç—Ç–æ —Ç–∞–∫–∞—è —É–º–Ω–∞—è —à—Ç—É–∫–∞ - –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏–∑ –°–±–µ—Ä–∞. üß†üí° –û–Ω –º–æ–∂–µ—Ç —Å–æ–µ–¥–∏–Ω–∏—Ç—å —Ç–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ñ–æ—Ç–æ —Ç–≤–æ–µ–≥–æ —Ç–∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ üêØüîó –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∂–µ, –ø—Ä–∞–≤–¥–∞? ü§© –ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? üòÑ", reply_markup=buttons)
            return step5.__name__
        case "no":
            step = await step6(callback.message)
            return step
    await bot.send_message(callback.message.chat.id, "–û–π. –¢—ã –Ω–∞–∂–∞–ª –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É( –≤–µ—Ä–Ω–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞!")
    return step4.__name__


async def step8(message):
    buttons = types.InlineKeyboardMarkup()
    buttons.add(types.InlineKeyboardButton("–•–æ—á—É –µ—â–µ —Ä–∞–∑–æ–∫ ü§©", callback_data="restart"))
    buttons.add(types.InlineKeyboardButton("–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", switch_inline_query="–£–∑–Ω–∞–π, –Ω–∞ –∫–∞–∫–æ–≥–æ —Ç–∏–≥—Ä–∞ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ—Ö–æ–∂ –≤ —ç—Ç–æ–º –±–æ—Ç–µ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–µ–≥–æ —Ç–∏–≥—Ä–∞-–¥–≤–æ–π–Ω–∏–∫–∞! üì∏üêØ"))
    buttons.add(types.InlineKeyboardButton("–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", callback_data="share_result"))
    buttons.add(types.InlineKeyboardButton("–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù", callback_data="feedback"))
    buttons.add(types.InlineKeyboardButton("–ü–æ–∫–∞ —Ö–≤–∞—Ç–∏—Ç", callback_data="finish"))
    await bot.send_message(message.chat.id, "–ê —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å? üòÅ", reply_markup=buttons)
    return step9.__name__


async def another_step8(message):
    buttons = types.InlineKeyboardMarkup()
    buttons.add(types.InlineKeyboardButton("–•–æ—á—É –µ—â–µ —Ä–∞–∑–æ–∫ ü§©", callback_data="restart"))
    buttons.add(types.InlineKeyboardButton("–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", switch_inline_query="–£–∑–Ω–∞–π, –Ω–∞ –∫–∞–∫–æ–≥–æ —Ç–∏–≥—Ä–∞ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ—Ö–æ–∂ –≤ —ç—Ç–æ–º –±–æ—Ç–µ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–µ–≥–æ —Ç–∏–≥—Ä–∞-–¥–≤–æ–π–Ω–∏–∫–∞! üì∏üêØ"))
    buttons.add(types.InlineKeyboardButton("–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", callback_data="share_result"))
    buttons.add(types.InlineKeyboardButton("–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù", callback_data="feedback"))
    buttons.add(types.InlineKeyboardButton("–ü–æ–∫–∞ —Ö–≤–∞—Ç–∏—Ç", callback_data="finish"))
    await bot.send_message(message.chat.id, "–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ –Ω–∏–±—É–¥—å –µ—â–µ üêØ?", reply_markup=buttons)
    return step9.__name__


async def step9(callback):
    if not validate(callback, "callback"):
        await bot.send_message(callback.message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–≤–æ–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞")
        return step9.__name__
    answer = callback.data
    match answer:
        case "restart":
            await bot.send_message(callback.message.chat.id, "–ñ–¥—É —Ç–≤–æ–µ —Ñ–æ—Ç–æ!")
            return step3.__name__
        case "share_result":
            await bot.send_message(callback.message.chat.id, "url")
            await bot.send_message(callback.message.chat.id, "–¢—ã –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
            return step3.__name__
        case "feedback":
            buttons = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="cancel"))
            await bot.send_message(callback.message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ üòä‚úçÔ∏è", reply_markup=buttons)
            return feedback.__name__
        case "finish":
            buttons = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–¢–µ–±–µ —Å–ø–∞—Å–∏–±–æ! –¢—ã –∫–ª–∞—Å—Å–Ω—ã–π ‚ù§Ô∏è", callback_data="absolutly_finish"))
            await bot.send_message(callback.message.chat.id, "–¢–æ–≥–¥–∞ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞–≥–ª—è–Ω—É–ª –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π! üêæ  –ê —Ç–æ –º–Ω–µ –±—ã–≤–∞–µ—Ç —Å–∫—É—á–Ω–æ –æ–¥–Ω–æ–º—É ü•∫ –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è! –ë—É–¥—É —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å —Å–Ω–æ–≤–∞ üêØüß°", reply_markup=buttons)
            return finish.__name__
    await bot.send_message(callback.message.chat.id, "–û–π. –¢—ã –Ω–∞–∂–∞–ª –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É( –≤–µ—Ä–Ω–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞!")
    return step9.__name__


async def finish(callback):
    if not validate(callback, "callback"):
        await bot.send_message(callback.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–≤–æ–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞")
        return finish.__name__
    answer = callback.data
    if answer == "absolutly_finish":
        await bot.send_message(callback.message.chat.id, "–ü—Ä–∏—Ö–æ–¥–∏ –≤ –≥–æ—Å—Ç–∏! –Ø –±—É–¥—É —Ç–µ–±—è –∂–¥–∞—Ç—å ü§óüåø")
        return step1.__name__
    await bot.send_message(callback.message.chat.id, "–û–π. –¢—ã –Ω–∞–∂–∞–ª –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É( –≤–µ—Ä–Ω–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞!")
    return finish.__name__


async def feedback(message):
    if validate(message, "callback"):
        await bot.send_message(message.message.chat.id, "–û—á–µ–Ω—å –∂–∞–ª—å, –≤–µ–¥—å —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –º–µ–Ω—èü•∫")
        return await step8(message.message)
    if not validate(message, "text"):
        await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –æ—Ç–∑—ã–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
        return feedback.__name__
    message: types.Message = message
    print("\n"*5, "-"*100, "–£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–∑—ã–≤!\n", message.text, "\n", "-"*100, "\n"*5)
    await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æüôèüèª –Ø –≤—Å—ë –ø–µ—Ä–µ–¥–∞–º, —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å üêØ‚ù§Ô∏è")
    return await step8(message)


@bot.message_handler(commands=["reset"])
async def reset(message):
    db.update_step(message.from_user.id, step1.__name__)


@bot.message_handler(commands=["test"])
async def test(message):
    me = await bot.get_me()
    print(me.id)
    buttons = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("test", switch_inline_query="–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ–≥–æ –∫—Ä—É—Ç–µ–π—à–µ–≥–æ –±–æ—Ç–∞!"))
    await bot.send_message(message.chat.id, "text", reply_markup=buttons)


@bot.message_handler(content_types=["text", "photo", "document"])
@bot.callback_query_handler(func=lambda message: True)
async def send_welcome(message):
    step = db.get_user(message.from_user.id)
    step = await globals()[step](message)
    db.update_step(message.from_user.id, step)


async def main():
    await bot.infinity_polling(timeout=1000)


if __name__ == '__main__':
    print("Bot starting")
    asyncio.run(globals()[main.__name__]())
    print("Bot stopped")
