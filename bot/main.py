import asyncio
import telebot
from telebot import types
from telebot.async_telebot import AsyncTeleBot
import database
import photo_service

TOKEN = "TOKEN"
bot = AsyncTeleBot(token=TOKEN)
db = database.Database()


def validate(msg, expected):
    if isinstance(msg, telebot.types.CallbackQuery):
        return expected == "callback"
    return expected == msg.content_type


async def start(message):
    if not validate(message, "text"):
        await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return start.__name__
    with open("photos/step1.png", "rb") as f:
        photo = f.read()
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ üêÖ", callback_data="upload_photo"))
    await bot.send_photo(message.chat.id, photo,
                         caption="–ü—Ä–∏–≤–µ—Ç, —è –¢–∏–≥—Ä–æ–ë–æ—Ç! üêØ –Ø —É–º–Ω—ã–π —Ç–∏–≥—Ä –∏ —è –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞ –∫–æ–≥–æ –∏–∑ –º–æ–∏—Ö —Å–æ—Ä–æ–¥–∏—á–µ–π —Ç—ã –ø–æ—Ö–æ–∂. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ!",
                         reply_markup=markup)
    return request_photo.__name__


async def request_photo(callback):
    if not validate(callback, "callback"):
        await bot.send_message(callback.message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É")
        return request_photo.__name__
    await bot.send_message(callback.message.chat.id, "–ñ–¥—É —Ç–≤–æ–µ —Ñ–æ—Ç–æ!")
    return receive_photo.__name__


async def receive_photo(message):
    if not validate(message, "photo"):
        await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ")
        return receive_photo.__name__
    photo = message.photo
    await bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —è –∑–Ω–∞—é, –∫—Ç–æ —Ç—ã üòè")

    file_id = photo[-1].file_id
    file_info = await bot.get_file(file_id)
    photo = await bot.download_file(file_info.file_path)

    with open(f"photos/{file_id}.png", "wb") as f:
        f.write(photo)

        db.add_photo(message.chat.id, f"photos/{file_id}.png")

    # tiger_photo = photo_service.get_photo(photo)
    tiger_photo = photo

    await bot.send_photo(message.chat.id, tiger_photo, caption="<description>")

    buttons = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–î–∞", callback_data="confirm_analysis"))
    buttons.add(types.InlineKeyboardButton("–ê —á—Ç–æ —ç—Ç–æ?", callback_data="ask_question"))
    buttons.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="decline_analysis"))
    await bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –º–∏–∫—Å —Å –ö–∞–Ω–¥–∏–Ω—Å–∫–∏–º? üßëüèª‚Äç ü™Ñ üêØ", reply_markup=buttons)
    return analyze_photo.__name__


async def analyze_photo(callback):
    if not validate(callback, "callback"):
        await bot.send_message(callback.message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–≤–æ–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞")
        return analyze_photo.__name__
    match callback.data:
        case "confirm_analysis":
            return await mix_photo(callback.message, db.get_photo(callback.from_user.id))
        case "ask_question":
            markup = types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–î–∞–≤–∞–π! üí™üé®", callback_data="mix_photo"))
            markup.add(types.InlineKeyboardButton("–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="skip_mix"))
            await bot.send_message(callback.message.chat.id,
                                   "–ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π - —ç—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏–∑ –°–±–µ—Ä–∞. "
                                   "–û–Ω –º–æ–∂–µ—Ç —Å–æ–µ–¥–∏–Ω–∏—Ç—å —Ç–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ñ–æ—Ç–æ —Ç–≤–æ–µ–≥–æ —Ç–∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ üêØüîó –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∂–µ, –ø—Ä–∞–≤–¥–∞? "
                                   "ü§© –ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? üòÑ", reply_markup=markup)
            return choose_mix_option.__name__
        case "decline_analysis":
            return await tigers_shoced(callback.message)
            return await skip_analysis(callback.message)
    await bot.send_message(callback.message.chat.id,
                           "–û–π, —Ç—ã –Ω–∞–∂–∞–ª –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É! –í–µ—Ä–Ω–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.")
    return analyze_photo.__name__


async def skip_mix(message):
    with open("photos/skip_mix.png", "rb") as f:
        photo = f.read()
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–ê —á—Ç–æ —Ç—ã –µ—â–µ —É–º–µ–µ—à—å?", callback_data="more_options"))
    await bot.send_photo(message.chat.id, photo,
        "–°—Ç—Ä–∞–Ω–Ω–æ! üêÖ –ù–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞—Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –º–∏–∫—Å, –∑–Ω–∞–π, —á—Ç–æ —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º! üé®üêæ", reply_markup=markup)
    return end.__name__


async def tigers_shoced(message):
    with open("photos/step6.png", "rb") as f:
        photo = f.read()
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–ê —á—Ç–æ —Ç—ã –µ—â–µ —É–º–µ–µ—à—å?", callback_data="more_options"))
    await bot.send_photo(message.chat.id, photo, caption=
    "–ú–æ–∏ –º–∞–ª—ã—à–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ —Ç–∏–≥—Ä—è—Ç–∞ —É–¥–∏–≤–ª–µ–Ω—ã! üêØüòÆ –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ —Å –Ω–∞–º–∏! üêæüé®", reply_markup=markup)
    return end.__name__


async def choose_mix_option(callback):
    if not validate(callback, "callback"):
        await bot.send_message(callback.message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–≤–æ–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞")
        return choose_mix_option.__name__
    match callback.data:
        case "mix_photo":
            return await mix_photo(callback.message, db.get_photo(callback.from_user.id))
        case "skip_mix":
            return await skip_mix(callback.message)
    await bot.send_message(callback.message.chat.id,
                           "–û–π! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∞–∂–∞–ª –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É. –í–µ—Ä–Ω–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
    return choose_mix_option.__name__


async def end(callback):
    if not validate(callback, "callback"):
        return end.__name__
    return await more_options(callback.message)


async def also_end(callback):
    if not validate(callback, "callback"):
        return also_end.__name__

    with open("photos/finish.png", "rb") as f:
        photo = f.read()
    await bot.send_photo(callback.message.chat.id, photo, caption="–ü—Ä–∏—Ö–æ–¥–∏ –≤ –≥–æ—Å—Ç–∏! –Ø –±—É–¥—É —Ç–µ–±—è –∂–¥–∞—Ç—å ü§óüåø")
    return start.__name__


async def skip_analysis(message):
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–¢–µ–±–µ —Å–ø–∞—Å–∏–±–æ! –¢—ã –∫–ª–∞—Å—Å–Ω—ã–π ‚ù§Ô∏è", callback_data="also_end"))
    await bot.send_message(message.chat.id,
                           "–¢–æ–≥–¥–∞ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞–≥–ª—è–Ω—É–ª –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π! üêæ –ê —Ç–æ –º–Ω–µ –±—ã–≤–∞–µ—Ç —Å–∫—É—á–Ω–æ –æ–¥–Ω–æ–º—É ü•∫ –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è! –ë—É–¥—É —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å —Å–Ω–æ–≤–∞ üêØüß°", reply_markup=markup)
    return also_end.__name__


async def mix_photo(message, photo_path):
    with open(photo_path, "rb") as f:
        photo = f.read()

    '''Here will be mix of photos'''

    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–ê —á—Ç–æ —Ç—ã –µ—â–µ —É–º–µ–µ—à—å?", callback_data="more_options"))
    await bot.send_photo(message.chat.id, photo, caption="–í–æ—Ç, —á—Ç–æ —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å‚ú®üò±", reply_markup=markup)
    return end.__name__


async def more_options(message):
    markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–•–æ—á—É –µ—â–µ —Ä–∞–∑–æ–∫ ü§©", callback_data="restart"))
    markup.add(types.InlineKeyboardButton("–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º",
        switch_inline_query="–£–∑–Ω–∞–π, –Ω–∞ –∫–∞–∫–æ–≥–æ —Ç–∏–≥—Ä–∞ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ—Ö–æ–∂ –≤ —ç—Ç–æ–º –±–æ—Ç–µ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–µ–≥–æ —Ç–∏–≥—Ä–∞-–¥–≤–æ–π–Ω–∏–∫–∞! üì∏üêØ"), )
    markup.add(types.InlineKeyboardButton("–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù", callback_data="feedback"))
    markup.add(types.InlineKeyboardButton("–ü–æ–∫–∞ —Ö–≤–∞—Ç–∏—Ç", callback_data="finish"))
    await bot.send_message(message.chat.id, "–ê —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å? üòÅ", reply_markup=markup)
    return handle_options.__name__


async def handle_options(callback):
    if not validate(callback, "callback"):
        await bot.send_message(callback.message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–≤–æ–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞")
        return handle_options.__name__
    match callback.data:
        case "restart":
            await bot.send_message(callback.message.chat.id, "–ñ–¥—É —Ç–≤–æ–µ —Ñ–æ—Ç–æ!")
            return receive_photo.__name__
        case "feedback":
            markup = types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="cancel_feedback"))
            await bot.send_message(callback.message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ üòä‚úçÔ∏è",
                                   reply_markup=markup)
            return handle_feedback.__name__
        case "finish":
            return await skip_analysis(callback.message)
    await bot.send_message(callback.message.chat.id,
                           "–û–π, —Ç—ã –Ω–∞–∂–∞–ª –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É! –í–µ—Ä–Ω–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.")
    return handle_options.__name__


async def handle_more_options(message):
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–•–æ—á—É –µ—â–µ —Ä–∞–∑–æ–∫ ü§©", callback_data="restart"),
        types.InlineKeyboardButton("–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º",
                                   switch_inline_query="–£–∑–Ω–∞–π, –Ω–∞ –∫–∞–∫–æ–≥–æ —Ç–∏–≥—Ä–∞ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ—Ö–æ–∂ –≤ —ç—Ç–æ–º –±–æ—Ç–µ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–µ–≥–æ —Ç–∏–≥—Ä–∞-–¥–≤–æ–π–Ω–∏–∫–∞! üì∏üêØ"),
        types.InlineKeyboardButton("–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù", callback_data="feedback"),
        types.InlineKeyboardButton("–ü–æ–∫–∞ —Ö–≤–∞—Ç–∏—Ç", callback_data="finish")
    )
    await bot.send_message(message.chat.id, "–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ? üêØ", reply_markup=markup)
    return handle_options.__name__


async def handle_feedback(message):
    if validate(message, "callback"):
        await bot.send_message(message.message.chat.id, "–û—á–µ–Ω—å –∂–∞–ª—å, –≤–µ–¥—å —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –º–µ–Ω—èü•∫")
        return await handle_more_options(message.message)
    if not validate(message, "text"):
        await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –æ—Ç–∑—ã–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
        return handle_feedback.__name__
    print("\n" * 5, "-" * 100, "–£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–∑—ã–≤!\n", message.text, "\n", "-" * 100, "\n" * 5)
    await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æüôèüèª –Ø –≤—Å—ë –ø–µ—Ä–µ–¥–∞–º, —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å üêØ‚ù§Ô∏è",)
    return await handle_more_options(message)


@bot.message_handler(commands=["reset"])
async def reset(message):
    db.update_step(message.from_user.id, start.__name__)


@bot.message_handler(commands=["test"])
async def test(message):
    me = await bot.get_me()
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("test", switch_inline_query="–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ–≥–æ –∫—Ä—É—Ç–µ–π—à–µ–≥–æ –±–æ—Ç–∞!"))
    await bot.send_message(message.chat.id, "text", reply_markup=markup)


@bot.message_handler(content_types=["text", "photo", "document"])
@bot.callback_query_handler(func=lambda msg: True)
async def handle_messages(msg):
    step = db.get_user(msg.from_user.id)
    step = await globals()[step](msg)
    db.update_step(msg.from_user.id, step)


async def main():
    await bot.infinity_polling(timeout=1000)


if __name__ == '__main__':
    print("Bot starting")
    asyncio.run(main())
    print("Bot stopped")